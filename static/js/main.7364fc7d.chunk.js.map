{"version":3,"sources":["header.component.tsx","Actions.ts","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["HeaderComponent","Header","style","as","Icon","name","Content","Actions","BPM_CHANGED","App","useState","error","setError","state","useSelector","dispatch","useDispatch","update","value","console","log","b","test","num","parseInt","determineError","type","payload","Container","textAlign","fluid","Input","size","label","basic","content","onChange","event","target","labelPosition","placeholder","bpm","Table","Row","HeaderCell","Body","Cell","Math","round","conversion","quarterMs","eighthMs","eightsTripletMs","sixteenth","Boolean","window","location","hostname","match","initialState","calculateConversion","eightMs","store","createStore","action","newState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7364fc7d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Header, Icon} from \"semantic-ui-react\";\n\nexport const HeaderComponent = () => {\n    return (\n        <Header style={{\"margin\": \"1%\"}} as='h2'>\n            <Icon name='exchange' />\n            <Header.Content>BPM Converter</Header.Content>\n        </Header>\n    )\n}","export class Actions {\n    public static readonly BPM_CHANGED = \"BPM_CHANGED\";\n}","import React, {useState} from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport {Container, Header, Input, Table} from 'semantic-ui-react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {BpmConverterState} from \"./store\";\nimport {HeaderComponent} from \"./header.component\";\nimport {Actions} from \"./Actions\";\n\nfunction App() {\n\n    const [error, setError] = useState(false);\n    const state = useSelector((state: BpmConverterState) => state)\n    const dispatch = useDispatch();\n\n    const determineError = (value: string): boolean => {\n        if (value) {\n            console.log(\"the val\", value)\n            if (/^\\d+$/.test(value)) {\n                const num = parseInt(value)\n                if (num < 200) {\n                    console.log(\"num is\", num)\n                    return false\n                }\n            }\n        }\n        console.log(\"returning error\")\n        return true;\n    }\n\n    function update(value: string) {\n        console.log(value);\n        let b = determineError(value);\n        console.log(\"error will be set to\", b)\n        setError(b);\n        console.log(\"dispatching bpm\", value)\n        dispatch({\n            type: Actions.BPM_CHANGED,\n            payload: !b ? value : 0\n        });\n\n    }\n\n    return (\n        <div>\n            <HeaderComponent/>\n            <Container textAlign={\"center\"} fluid={true}>\n                <Header style={{\"marginTop\": \"10%\"}} as={\"h2\"}>Convert BPM to ms</Header>\n                <Input\n                    style={{\"marginTop\": \"2%\"}}\n                    size={\"massive\"}\n                    label={{basic: true, content: 'BPM'}}\n                    type={\"digits\"}\n                    error={error}\n                    onChange={event => update(event.target.value)}\n                    labelPosition='right'\n                    placeholder='Enter BPM...'\n                />\n\n                {\n                    state.bpm !== 0 &&\n\n                    <Container size={\"huge\"}>\n                        <Table style={{\"marginTop\": \"10%\"}} basic=\"very\">\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell>Tempo</Table.HeaderCell>\n                                    <Table.HeaderCell>1/4</Table.HeaderCell>\n                                    <Table.HeaderCell>1/8</Table.HeaderCell>\n                                    <Table.HeaderCell>1/8T</Table.HeaderCell>\n                                    <Table.HeaderCell>1/16</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n\n                            <Table.Body>\n                                <Table.Row>\n                                    <Table.Cell>{state.bpm} BPM</Table.Cell>\n                                    <Table.Cell>{Math.round(state.conversion?.quarterMs)}</Table.Cell>\n                                    <Table.Cell>{Math.round(state.conversion?.eighthMs)}</Table.Cell>\n                                    <Table.Cell>{Math.round(state.conversion?.eightsTripletMs)}</Table.Cell>\n                                    <Table.Cell>{Math.round(state.conversion?.sixteenth)}</Table.Cell>\n                                </Table.Row>\n                            </Table.Body>\n                        </Table>\n                    </Container>\n                }\n            </Container>\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\nimport {Actions} from \"./Actions\";\n\nconst initialState: BpmConverterState = {\n    bpm: 0,\n    conversion: {\n        quarterMs: 0,\n        eighthMs: 0,\n        sixteenth: 0,\n        eightsTripletMs: 0,\n    }\n}\n\nexport interface Conversion {\n    quarterMs: number;\n    eighthMs: number;\n    sixteenth: number;\n    eightsTripletMs: number;\n}\n\nexport interface BpmConverterState {\n    bpm: number;\n    conversion: Conversion\n}\n\n\nfunction calculateConversion(bpm: number): Conversion {\n    const quarterMs = 60000 / bpm;\n    const eightMs = quarterMs / 2;\n    const sixteenthMs = eightMs / 2;\n    const eigthsTripletsMs = quarterMs / 3;\n    return {\n        quarterMs: quarterMs,\n        eighthMs: eightMs,\n        sixteenth: sixteenthMs,\n        eightsTripletMs: eigthsTripletsMs,\n    }\n}\n\nconst rootReducer = (state = initialState, action: any) => {\n    console.log(\"some action appeared\", action);\n    switch (action.type) {\n        case Actions.BPM_CHANGED:\n            return newState({\n                ...state,\n                bpm: action.payload,\n                conversion: calculateConversion(action.payload)\n            });\n        default:\n            return state;\n    }\n};\n\n// @ts-ignore\nexport const store = createStore(rootReducer);\n\n\nconst newState = (state: any) => {\n    console.log(\"new state\", state);\n    return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n      <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}